# 1 "shaders/VertexCommon.cgh"
float4 TransformPosition (
	in float4x4 ModelViewMatrix,
	in float4x4 ProjectionMatrix,
	float4 position
) {
    return mul(mul(position, ModelViewMatrix), ProjectionMatrix);
}

inline float2 ComputeRegionSize(
	in float4 textureRegion
) {
	return textureRegion.zw - textureRegion.xy;
}

inline float2 ComputeCorner(
    in float cornerIndex,
    in float2 regionSize
) {
	
	if (cornerIndex == 0)
		return float2(0, 0);
	else if (cornerIndex == 1)
		return float2(regionSize.x, 0);
	else if (cornerIndex == 2)
		return regionSize;
	else
		return float2(0, regionSize.y);
}

inline float2 ComputeTexCoord(
	in uniform float2 halfTexel,
    in float cornerIndex,
    in float2 corner,
    in float4 textureRegion
) {
    return (textureRegion.xy + corner) + halfTexel;
}

inline float2 ComputeRotatedCorner(
	in uniform float2 halfTexel,
	in uniform float2 bitmapTextureSize,
	in float2 corner,
    in float4 textureRegion,
    in float4 scaleOrigin, 
    in float rotation
) {
	corner = abs(corner);
    corner -= (scaleOrigin.zw * abs(textureRegion.zw - textureRegion.xy));
    float2 sinCos, rotatedCorner;
    corner *= scaleOrigin.xy;
    corner *= bitmapTextureSize;
    sincos(rotation, sinCos.x, sinCos.y);
    return float2(
		(sinCos.y * corner.x) - (sinCos.x * corner.y),
		(sinCos.x * corner.x) + (sinCos.y * corner.y)
	) - halfTexel;
}

inline void OutputRegions(
	in uniform float2 halfTexel,
    in float4 textureRegion,
    out float2 texTL,
    out float2 texBR
) {
    texTL = min(textureRegion.xy, textureRegion.zw) + halfTexel;
    texBR = max(textureRegion.xy, textureRegion.zw) - halfTexel;
}
# 3 "shaders/Bitmap.vcgh"
void main(
	in uniform float4x4 ProjectionMatrix,
	in uniform float4x4 ModelViewMatrix,
	in uniform float2 HalfTexel,
	in uniform float2 BitmapTextureSize,
	in uniform float2 ViewportScale,
	in uniform float2 ViewportPosition,
  in float3 position : POSITION, 
  in float4 textureRegion : TEXCOORD0, 
  in float4 scaleOrigin : TEXCOORD1, 
  in float rotation : TEXCOORD2,
  in float4 multiplyColor : COLOR0,
  in float4 addColor : COLOR1,
  in float cornerIndex : BLENDINDICES, 
  out float4 transformedPosition : POSITION,
  out float4 transformedPosition2 : TEXCOORD3,
  out float2 texCoordOut : TEXCOORD0,
  out float4 multiplyColorOut : COLOR0,
  out float4 addColorOut : COLOR1,
  out float2 texTL : TEXCOORD1,
  out float2 texBR : TEXCOORD2
) {
	float2 regionSize = ComputeRegionSize(textureRegion);
	float2 corner = ComputeCorner(cornerIndex, regionSize);
  float2 rotatedCorner = ComputeRotatedCorner(
    HalfTexel, BitmapTextureSize,
    corner, textureRegion, scaleOrigin, rotation
  );
    
  texCoordOut = ComputeTexCoord(
    HalfTexel, (int)cornerIndex, corner, textureRegion
  ) - HalfTexel;
  position.xy += rotatedCorner;
  





  transformedPosition = TransformPosition(ProjectionMatrix, ModelViewMatrix, float4(position.xy, position.z, 1));
  transformedPosition2 = transformedPosition;
  OutputRegions(
    HalfTexel, textureRegion, texTL, texBR
	);
	
	multiplyColorOut = multiplyColor;
	addColorOut = addColor;
}
