#include "VertexCommon.cgh"

void main(
	in uniform float4x4 ProjectionMatrix,
	in uniform float4x4 ModelViewMatrix,
	in uniform float2 HalfTexel,
	in uniform float2 BitmapTextureSize,
	in uniform float2 ViewportScale,
	in uniform float2 ViewportPosition,
  in float3 position : POSITION, // x, y
  in float4 textureRegion : TEXCOORD0, // x1, y1, x2, y2
  in float4 scaleOrigin : TEXCOORD1, // scalex, scaley, originx, originy
  in float rotation : TEXCOORD2,
  in float4 multiplyColor : COLOR0,
  in float4 addColor : COLOR1,
  in float cornerIndex : BLENDINDICES, // 0-3
  out float4 transformedPosition : POSITION,
  out float4 transformedPosition2 : TEXCOORD3,
  out float2 texCoordOut : TEXCOORD0,
  out float4 multiplyColorOut : COLOR0,
  out float4 addColorOut : COLOR1,
  out float2 texTL : TEXCOORD1,
  out float2 texBR : TEXCOORD2
) {
	float2 regionSize = ComputeRegionSize(textureRegion);
	float2 corner = ComputeCorner(cornerIndex, regionSize);
  float2 rotatedCorner = ComputeRotatedCorner(
    HalfTexel, BitmapTextureSize,
    corner, textureRegion, scaleOrigin, rotation
  );
    
  texCoordOut = ComputeTexCoord(
    HalfTexel, (int)cornerIndex, corner, textureRegion
  ) - HalfTexel;
  position.xy += rotatedCorner;
  
#ifdef WORLD_SPACE
  position.xy -= ViewportPosition;
  position.xy *= ViewportScale;
#endif

  transformedPosition = TransformPosition(ProjectionMatrix, ModelViewMatrix, float4(position.xy, position.z, 1));
  transformedPosition2 = transformedPosition;
	
	multiplyColorOut = multiplyColor;
	addColorOut = addColor;
}